#!/usr/bin/env python

import argparse
import sys
import os
import re
import logging
import logging.handlers
import serial
import subprocess
import ConfigParser
from mb_master import MBMaster
import mb_master
import mb_slave

global args, log

def read_config_file():
    global args, log
    if not os.path.exists(args.config_file):
        sys.stderr.write("ERROR: cannot config file does not exist: %s\n" % args.config_file)
        sys.exit(1)
    parser = ConfigParser.SafeConfigParser( {
        'logging_level': 'warning'
    } )
    parser.read(args.config_file)
    if args.logging_level is None:
        try:
            args.logging_level = {'debug':logging.DEBUG,'warning':logging.WARNING,'info':logging.INFO,'error':logging.ERROR}[parser.get('master', 'logging_level')]
        except KeyError:
            sys.stderr.write("logging_level setting in config file in invalid.  Assuming 'warning'\n")
            pass

def init_log():
    global args, log
    if args.log_file is not None and args.daemon == False:
        logging.basicConfig(format='%(asctime)s %(name)s[%(process)d] %(levelname)s: %(message)s', filename=args.log_file)
    else:
        logging.basicConfig(format='%(asctime)s %(name)s[%(process)d] %(levelname)s: %(message)s')
    log = logging.getLogger('fml')
    log.setLevel(args.logging_level)
    if args.daemon:
        formatter = logging.Formatter('%(name)s[%(process)d]: %(levelname)s %(message)s')
        handler = logging.handlers.SysLogHandler('/dev/log')
        handler.setFormatter(formatter)
        log.addHandler(handler)
    mb_master.log = log
    mb_slave.log = log

def get_fml_pids():
    cmd = subprocess.Popen(['pgrep', '-f', 'python.*/fml'] , shell=False, stdout=subprocess.PIPE)
    return [pid for pid in cmd.stdout.read().split('\n') if pid not in ['',str(os.getpid())]]

def list_fml_instances():
    global log
    pids = get_fml_pids()
    if len(pids) == 0:
        log.info("list_fml_instances: no fml processes running")
        return
    subprocess.call(['ps','u','-p',','.join(pids)])

def kill_fml_instances():
    pids = get_fml_pids()
    if len(pids) == 0:
        log.info("kill_fml_instances: no fml processes running")
        return
    sys.stdout.write("killing %d fml processes... trying SIGHUP first " % len(pids))
    sys.stdout.flush()
    subprocess.call(['kill', '-HUP'] + pids)
    for n in range(0,5):
        time.sleep(0.25)
        pids = get_fml_pids()
        if len(pids) == 0:
            print ''
            return
        sys.stdout.write('.')
        sys.stdout.flush()
    sys.stdout.write("\nkill_fml_instances: still %d processes running... trying SIGKILL " % len(pids))
    sys.stdout.flush()
    pids = get_fml_pids()
    if len(pids) == 0:
        return
    subprocess.call(['kill', '-KILL'] + pids)
    for n in range(0,5):
        time.sleep(0.25)
        if len(get_fml_pids()) == 0:
            print ''
            return
        sys.stdout.write('.')
        sys.stdout.flush()
    print "\nWARNING: still %d processes running. Try running with sudo?" % len(pids)

if __name__ == '__main__':
    global args, log
    aparser = argparse.ArgumentParser(description='Modbus Register Logging Daemon')
    aparser.add_argument('--config-file', dest='config_file', default='/etc/fml.conf', help='specify the path to the config file')
    aparser.add_argument('--daemon', dest='daemon', action='store_const', const=True, default=False, help='run in daemon mode (detach, log to syslog, output to file)')
    aparser.add_argument('--debug', dest='logging_level', action='store_const', const=logging.DEBUG, default=None, help='write debugging output in the log')
    aparser.add_argument('--dump-config', dest='one_time_operation', action='store_const', const='dump', default=None, help='print fml configuratio and exit')
    aparser.add_argument('--format', dest='output_format', default=None, help='write in specified format (gnostic, csv, pretty or rrd)')
    aparser.add_argument('--interval', default=None, type=float, help='how many seconds between fetching data from slaves')
    aparser.add_argument('--list-fml', dest='one_time_operation', action='store_const', const='list', default=None, help='show a list of fml processes which are running')
    aparser.add_argument('--log-file', dest='log_file', default=None, help='send logging to this file instead of stderr (has no effect when in daemon mode)')
    aparser.add_argument('--kill-fml', dest='one_time_operation', action='store_const', const='kill', default=None, help='kill and running instances of fml')
    aparser.add_argument('--output-file', dest='output_file', default=None, help='write output to specified file')
    aparser.add_argument('--raw', dest='raw_mode', default=None, help='suppress post-processing - just write data as it comes from the slaves')
    aparser.add_argument('--serial-device', dest='serial_device', default=None, help='specify serial device node to connect with, e.g. /dev/ttyS0')
    aparser.add_argument('--serial-baud', dest='serial_baud', type=int, default=None, help='specify baud rate for serial communications')
    aparser.add_argument('--serial-bytesize', dest='serial_bytesize', type=int, default=None, help='specify bytesize for serial communications')
    aparser.add_argument('--serial-parity', dest='serial_parity', default=None, help='specify parity for serial communications (none, mark, even, or odd)')
    aparser.add_argument('--serial-stopbits', dest='serial_stopbits', type=int, default=None, help='specify number of stop bits for serial communications')
    aparser.add_argument('--serial-timeout', dest='serial_timeout', type=float, default=None, help='how long to wait for a modbus reply')
    aparser.add_argument('--times', default=None, type=int, help='fetch from slaves a specified number of times and then exit')
    aparser.add_argument('--verbose', action='store_const', const=True, default=False, help='be more verbose (dump command)')

    args = aparser.parse_args()
    read_config_file()
    init_log()

    if args.one_time_operation == 'list':
        list_fml_instances() 
        sys.exit(0)

    if args.one_time_operation == 'kill':
        kill_fml_instances() 
        sys.exit(0)

    # create our master object, passing args (with None values removed) for over-riding config file settings
    master = MBMaster(config_file=args.config_file, cl_args={k: v for k, v in vars(args).iteritems() if v is not None})

    if args.one_time_operation == 'dump':
        # hide PrettyFormatter details cos it makes the output too wide with little benefit
        print repr(master)
        r = master.dump_config()
        if not args.verbose:
            r = re.sub(r'pf=[^\)]*\), ', r'', r)
            r = re.sub(r', display=(True|False)', r'', r)
        print r
        sys.exit(0)

    master.run()

